<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HDMI1.4协议总结（一）：综述和编码方式</title>
    <url>/2025/02/15/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>一个HDMI传输系统包括发送端（source）和接收端（sink）。如下图所示，HDMI线缆包括以下连接：</p>
<ul>
<li>  由四个差分对组成的主数据通路，包括三个数据通道和一个时钟通道。</li>
<li>  VESA DDC，实际上就是一个I2C bus，用于配置和状态信息的传输</li>
<li>  CEC（optional），消费电子控制</li>
<li>  HEAC，家庭影院系统中音频回传功能</li>
<li>  HPD，热插拔检测<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/HDMI%E6%A1%86%E5%9B%BE.png" alt="HDMI框图"><br>HDMI物理层的实现不在此次赘述，下面直接进入HDMI的数据链路层。</li>
</ul>
<h1 id="HDMI信号编码"><a href="#HDMI信号编码" class="headerlink" title="HDMI信号编码"></a>HDMI信号编码</h1><p>HDMI一共有三种传输模式：Control Period传输control data；Data Island Period传输packet data；Video Data Period传输video data。一个HDMI传输帧的例子如下<br>同步信号HSYNC和VSYNC会在特定的行、列位置拉起，用于source和sink之间的同步。可以看到实际传输的帧大小是要大于视频大小（720*480p），包括额外插入了一些行，并且行的长度也得到了扩展，这些扩展的区域被称为blank区（包括Vblank和Hblank），blank区由Control Period和Data Island Period交替填充，其中在Data Island Period会传输音频数据和其他辅助数据（例如像素格式等）。实际传输Video Data Period的区域称为active区，传输我们最终会在显示器上看到的视频图像数据。<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/HDMI%E5%B8%A7%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="HDMI帧示意图"><br>在HDMI clock channel上每一拍时钟（又称为一个TMDS Clock），每个data channel上都会传输10bit的character。这10bit的character，对于不同的数据，由不同的编码方式得到。control data：2 bit -&gt; 10 bit编码；packet data：4 bit -&gt; 10 bit编码（TERC4编码）；video data：8 bit -&gt; 10 bit编码（TMDS编码）。换句话来说，每个TMDS Clock，在每个data channel上，会传输2bit的control data，或者4bit的packet data，或者10bit的control data。这三种数据在data channel上的传输如下图<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/HDMI%E4%BC%A0%E8%BE%93%E8%BF%9E%E6%8E%A5%E5%9B%BE.png" alt="HDMI传输连接图"><br>Control data：在channel 0的2bit数据代表HSYNC和VSYNC，channel 1和channel 2上的4bit数据组合构成CTL0-3，其代表的具体信息在后文介绍。<br>Packet data：channel 0上的4bit数据，由HSYNC、VSYNC以及packet header（这里感觉官方文档给的上面这个示意图不太好，并没有表示其中也包含了HSYNC和VSYNC信息），packet header用于sink判断当前packet的类型（音频包、辅助信息包等）；channel 1和channel 2上传输实际packet信息，如音频包会在这两个channel上传输音频信号采样值。<br>Video data：channel 0到channel 2上总共24bit，均为视频像素数据。</p>
<p>Data Island Period和Video Data Period的传输均需要遵循一定的规则，使得sink端可以正确识别Packet data和Video Data。其传输时序如下：<br><u>Data Island Period</u>：</p>
<ul>
<li>紧贴Data Island Period传输的前后，分别有一个Data Island Guard Band（称为Leading Guard Band和Trailing Guard Band），长度均为2个TMDS Clock。</li>
<li>在Leading Data Island Guard Band前面，有一个Data Island Preamble，长度为8个TMDS Clock。</li>
<li>由于HDMI1.4 协议规定，每次发Control Period必须连续发至少12个TMDS Clock。由于Data Island Preamble被视为一种特殊的Control Period，因此在Data Island Preamble前面会有至少连续4 TMDS Clock的Control Period。</li>
<li>在两个Data Island Guard Band包围起来的中间区域，会发送实际的packet data。每一个packet需要32个TMDS Clock，可以连续发送最少1个，最多18个packet。因此每一个Data Island Period的最小长度为1*32+2*2=36 TMDS Clock（头尾的两个Guard Band也是Data Island Period的一部分）</li>
</ul>
<p><u>Video Data Period</u>：</p>
<ul>
<li>与Data Island Period类似，有一个长度为2TMDS Clock的Video Data Guard Band，但仅存在与Video Data Period传输最开始（也即只有Leading Guard Band）。</li>
<li>同样有一个长度为8 TMDS Clock的Video Data Preamble。</li>
<li>Video Data Preamble前面同样会有至少连续4 TMDS Clock的Control Period。</li>
<li>Data Island Period和Video Data Period不能紧贴，无论哪一个在前，在前者传输完成后必须传输一段Control Period，才能传输后者。<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/HDMI%E4%BC%A0%E8%BE%93%E9%A1%BA%E5%BA%8F%E5%9B%BE.png" alt="HDMI传输顺序图"></li>
</ul>
<h2 id="Control-Period"><a href="#Control-Period" class="headerlink" title="Control Period"></a>Control Period</h2><h3 id="Control-Period-Signal"><a href="#Control-Period-Signal" class="headerlink" title="Control Period Signal"></a>Control Period Signal</h3><p>Control Period在channel 0上传输HSYNC和VSYNC，在channel 1-2上传输CTL0-3。HDMI1.4协议下，CTL0-3主要用于Video Data Preamble和Data Island Preamble传输，以及被sink用作为Character Synchronization（也用于HDCP1.4 EESS信号传输，将在HDCP的文章中介绍）。<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/Control_Period_%E4%BF%A1%E5%8F%B7.png" alt="Control_Period_信号"></p>
<h4 id="Preamble"><a href="#Preamble" class="headerlink" title="Preamble"></a>Preamble</h4><p>Channel 0上的HSYNC和VSYNC在Preamble期间按实际情况正常传输<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/Preamble.png" alt="Preamble"></p>
<h4 id="Character-Synchronization"><a href="#Character-Synchronization" class="headerlink" title="Character Synchronization"></a>Character Synchronization</h4><p><em>注：TMDS Character是指每次编码后，每个TMDS Clock传输的10 bit值。</em><br>经过编码后，Video Data Period和Data Island Period的每个character会包含5次或者更少的1-&gt;0或0-&gt;1跳转，而Control Period会包含7次或更多的跳转。基于此，正如上文一提到的要求，source端的每次Control Period需要持续12个TMDS Clocks，而sink端的解码器应该能识别到这样连续的Contral Period传输，从而同步到Character边界。Sink端的检测算法实现由其自行决定，不在HDMI1.4协议中做要求<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/Control_Period_%E8%A6%81%E6%B1%82.png" alt="Control_Period_要求"><br>每隔一定时间间隔（至少50毫秒一次），source端还被要求要发一个持续时间更长（32 TMDS Clocks）的Control Period，被称为Extended Control Period.<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/Extend_Control_Period_%E8%A6%81%E6%B1%82.png" alt="Extend_Control_Period_要求"></p>
<h3 id="Control-Period-Encoding"><a href="#Control-Period-Encoding" class="headerlink" title="Control Period Encoding"></a>Control Period Encoding</h3><p><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/Control_Period_%E7%BC%96%E7%A0%81.png" alt="Control_Period_编码"></p>
<h2 id="Data-Island-Period"><a href="#Data-Island-Period" class="headerlink" title="Data Island Period"></a>Data Island Period</h2><h3 id="Data-Island-Signal"><a href="#Data-Island-Signal" class="headerlink" title="Data Island Signal"></a>Data Island Signal</h3><p>对于Data Island Period（包括对应的Guard Band）的传输，channel 0中的D0和D1分别传输HSYNC 和VSYNC，D2传输Packet Header（在Guard Band区域固定传输1），D3在Leading Guard Band后的第一个TMDS Clock传输0，在其他TMDS Clock（包括Guard Band）传输1（见上面Figure5-3）。channel 1和channel2的总计8bit用于传输Packet Data（Guard Band区域会传输固定的10 bits character）。</p>
<h4 id="Data-Island-Guard-Band"><a href="#Data-Island-Guard-Band" class="headerlink" title="Data Island Guard Band"></a>Data Island Guard Band</h4><p>Data Island Guard Band时，channel 1和channel 2被直接编码为实际HDMI Lane上固定的10 bit Character，如下：<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/Data_Island_GB.png" alt="Data_Island_GB"><br>channel 0上，基于上文，D2和D3被固定为1，因此，依据HSYNC和VSYNC的取值，channel 0上D[3:0]可能的取值为0xC，0xD，0xE，0xF。channel 0上的D[3:0]通过TERC4编码为10bit character。</p>
<h4 id="Data-Island-Packet"><a href="#Data-Island-Packet" class="headerlink" title="Data Island Packet"></a>Data Island Packet</h4><h5 id="Packet-结构"><a href="#Packet-结构" class="headerlink" title="Packet 结构"></a>Packet 结构</h5><p>每一个Packet需要32个TMDS Clocks传输，由Packet Header和Packet Body（包含4个Subpackets），以及相应的纠错位（error correction bits）组成。每一个Subpacket包含56bits，并由一个8bits的BCH ECC奇偶校验位（parity bits）保护。<br>Subpacket 0加上其对应的校验位组成BCH Block 0，其他的BCH Block 1-3也是类似的；BCH Block0-3经过映射之后在channel 1和channel 2上传输。24 bits的Packet Header加上对应的8 bits校验位构成BCH Block4，经过映射后在channel 0的D2上传输。这些传输映射关系如下图所示：<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/Packet%E7%BB%93%E6%9E%84.png" alt="Packet结构"><br>Packet Header的24bits又分为3个Header Bytes：HB0，HB1，HB2。每一个Subpacket的56bits又分为7个Subpacket Bytes：SB0，SB1，……，SB6。<br>Subpacket0上的SB0-SB6，对应地映射为Packet Bytes，PB0-PB6。以此类推，Subpacket1，2，3上的SB0-SB6，分别映射为PB7-PB13，PB14-PB20，PB21-PB27。</p>
<h5 id="纠错位计算"><a href="#纠错位计算" class="headerlink" title="纠错位计算"></a>纠错位计算</h5><p>纠错位计算采用BCH(64,56)和BCH(32,24)，纠错位生成器使用的多项式和框图如下所示，具体BCH的原理和计算不在此处赘述。<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/Packet%E7%BA%A0%E9%94%99%E4%BD%8D.png" alt="Packet纠错位"></p>
<h5 id="Packet-Header和Packet-Body的定义"><a href="#Packet-Header和Packet-Body的定义" class="headerlink" title="Packet Header和Packet Body的定义"></a>Packet Header和Packet Body的定义</h5><p>详见后续HDMI1.4协议系列文章。</p>
<h3 id="Data-Island-Period-编码：TERC4"><a href="#Data-Island-Period-编码：TERC4" class="headerlink" title="Data Island Period 编码：TERC4"></a>Data Island Period 编码：TERC4</h3><p><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/TERC4.png" alt="TERC4"></p>
<h2 id="Video-Data-Period"><a href="#Video-Data-Period" class="headerlink" title="Video Data Period"></a>Video Data Period</h2><h3 id="Video-Data-Period-Signal"><a href="#Video-Data-Period-Signal" class="headerlink" title="Video Data Period Signal"></a>Video Data Period Signal</h3><p>对于Video Data Period的传输，Guard Band时三个channel上都会传输固定的10 bits character，而在active区域传输视频像素时，3个channel上的D[7:0]都传输了8bits的像素数据。 </p>
<h4 id="Video-Data-Guard-Band"><a href="#Video-Data-Guard-Band" class="headerlink" title="Video Data Guard Band"></a>Video Data Guard Band</h4><p><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/Video_Data_GB.png" alt="Video_Data_GB"></p>
<h4 id="Pixel-Data"><a href="#Pixel-Data" class="headerlink" title="Pixel Data"></a>Pixel Data</h4><p>详见后续HDMI1.4协议系列文章。</p>
<h3 id="Video-Data-Period编码：TMDS"><a href="#Video-Data-Period编码：TMDS" class="headerlink" title="Video Data Period编码：TMDS"></a>Video Data Period编码：TMDS</h3><p>每个channel上的8bits Video Data会被编码为10 bits character，编码原则是实现尽可能的直流平衡（1和0的数量差距尽可能小），以及尽可能减小1和0之间的跳变。编码流程包括两步：第一步是对8bits编码得到最小化跳变的9bits，第二步是将9bits编码为直流平衡的10bits character。<br>第一步8-&gt;9bits的编码：9bits code的LSb等于输入的8bits的LSB，随后的7bit，每一bit的计算都基于如下公式: output[n] = input[n] OR output[n-1]，或output[n] = input[n] NOR output[n-1]。具体计算选择XOR（异或）还是XNOR（同或），取决于哪种模式编码得到的9bits code中的跳变更少（算法使用的判断条件如下流程图所示）。9bits code的MSb用于指示当前编码使用的是OR还是NOR。<br>第二步9-&gt;10bits的编码：实现数据流的直流平衡。添加一个第10bit的最高位，以指示是否对数据进行按位取反。编码器基于目前已传输的数据流中0和1的数量差异，以及当前character已编码的低8bits的0和1的数量差异，决定是否进行取反。<br>所有的编码流程如下图所示。整个编码会产生460种不同的10 bits characters。在编码器正确工作的情况下，不应在Video Data Period产生其他的characters。<br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/TMDS1.png" alt="TMDS1"><br><img src="/images/HDMI1-4%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%BB%BC%E8%BF%B0%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/TMDS2.png" alt="TMDS2"></p>
]]></content>
      <categories>
        <category>协议总结</category>
        <category>HDMI</category>
      </categories>
      <tags>
        <tag>HDMI1.4</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建过程遇到的一些问题</title>
    <url>/2025/02/09/hexo%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="一、ssh-connect-to-host-github-com-port-22-Connection-refused"><a href="#一、ssh-connect-to-host-github-com-port-22-Connection-refused" class="headerlink" title="一、ssh: connect to host github.com port 22: Connection refused"></a>一、ssh: connect to host github.com port 22: Connection refused</h1><p> 修改.ssh文件夹中的config文件（若没有则新建一个）。在文件中加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure>

<h1 id="二、hexo-init-时卡住"><a href="#二、hexo-init-时卡住" class="headerlink" title="二、hexo init 时卡住"></a>二、hexo init 时卡住</h1><p>hexo init</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>实际上是运行了如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hexojs/hexo-starter.git blog</span><br><span class="line">cd blog</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure>

<p>所以，我们可以直接运行如下命令替换原先的<code>hexo init</code>命令，从gitee源做clone</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/weilining/hexo-starter.git blog</span><br><span class="line">cd blog</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure>

<h1 id="三、hexo-d时报错：ERROR-Deployer-not-found-git"><a href="#三、hexo-d时报错：ERROR-Deployer-not-found-git" class="headerlink" title="三、hexo d时报错：ERROR Deployer not found: git"></a>三、hexo d时报错：ERROR Deployer not found: git</h1><p>运行以下命令安装hexo-deployer-git插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h1 id="四、hexo-d时报错：spawn-failed，无法推送到github"><a href="#四、hexo-d时报错：spawn-failed，无法推送到github" class="headerlink" title="四、hexo d时报错：spawn failed，无法推送到github"></a>四、hexo d时报错：spawn failed，无法推送到github</h1><p>修改_config.yml配置文件</p>
<p>原先为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;Name&gt;/&lt;Name&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>替换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Name&gt;/&lt;Name&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown file quick start</title>
    <url>/2025/02/09/markdown-file-quick-start/</url>
    <content><![CDATA[<h1 id="一、标题和段落"><a href="#一、标题和段落" class="headerlink" title="一、标题和段落"></a>一、标题和段落</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">#的数量代表标题的级数</span><br><span class="line"></span><br><span class="line">enter换行，代表段落之间更大的间隔</span><br><span class="line">shift+enter换行，代表段落之间小的间隔</span><br></pre></td></tr></table></figure>

<h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**粗体**</span><br><span class="line">*斜体*</span><br><span class="line">==高亮==</span><br><span class="line">~~删除线~~</span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">a^上标^b</span><br><span class="line">c~下标~d</span><br><span class="line"></span><br><span class="line">用反斜杠可以打出转义字符，如\*</span><br></pre></td></tr></table></figure>

<h1 id="三、文本逻辑结构"><a href="#三、文本逻辑结构" class="headerlink" title="三、文本逻辑结构"></a>三、文本逻辑结构</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 第一点</span><br><span class="line">* 第二点</span><br><span class="line">tab键可以降低当前行的级别</span><br><span class="line">shift+tab可以升高当前行的级别</span><br></pre></td></tr></table></figure>
<ul>
<li>第一点<ul>
<li>第一点中的第一小点</li>
</ul>
</li>
<li>第二点</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以给每一点编号：</span><br><span class="line">1. 第一点</span><br><span class="line">2. 第二点</span><br></pre></td></tr></table></figure>
<ol>
<li>第一点</li>
<li>第二点</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- [ ] 未完成事项</span><br><span class="line">- [x] 已完成事项</span><br></pre></td></tr></table></figure>
<ul>
<li><input disabled="" type="checkbox"> 未完成事项</li>
<li><input checked="" disabled="" type="checkbox"> 已完成事项</li>
</ul>
<h1 id="四、代码块"><a href="#四、代码块" class="headerlink" title="四、代码块"></a>四、代码块</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`&lt;code&gt;` 在文本中间插入行内代码</span><br></pre></td></tr></table></figure>
<p>这是一个行内代码<code>int a = 0;</code>的例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```&lt;语言名称&gt; </span><br><span class="line">&lt;code&gt;</span><br><span class="line">```</span><br><span class="line">显示代码块，常用语言名称bash, python, c, c++, verilog等</span><br></pre></td></tr></table></figure>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test;</span><br><span class="line">    <span class="keyword">wire</span> a;</span><br><span class="line">    <span class="keyword">assign</span> a = <span class="number">1&#x27;b0</span>;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h1 id="五、图表"><a href="#五、图表" class="headerlink" title="五、图表"></a>五、图表</h1><h2 id="1-图片"><a href="#1-图片" class="headerlink" title="1. 图片"></a>1. 图片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![图片名，不显示](图片路径 &quot;图片标题&quot;)</span><br></pre></td></tr></table></figure>
<p><img src="/images/markdown-file-quick-start/yumaobi.jpg" alt="示例"></p>
<h2 id="2-表格"><a href="#2-表格" class="headerlink" title="2. 表格"></a>2. 表格</h2><p>表格的代码直接写相对麻烦，建议在Typora中直接ctrl+t插入表格</p>
<h1 id="六、链接"><a href="#六、链接" class="headerlink" title="六、链接"></a>六、链接</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[显示名称](网址)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/">B站</a></p>
]]></content>
      <categories>
        <category>其他</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
